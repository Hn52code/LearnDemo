<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- ===============================引入jdbc.properties属性文件============================= -->
    <!-- ===== 方式一 ===== -->
    <context:property-placeholder location="classpath:global-config.properties"/>

    <!-- ===== 方式二 ===== -->
    <!--<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
    <!--<property name="locations">-->
    <!--<list>-->
    <!--<value>classpath:global-config.properties</value>-->
    <!--&lt;!&ndash;<value>file:global-config.properties</value>&ndash;&gt;-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- ========================================配置数据源========================================= -->
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>

        <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。
        分库分表较多的数据库，建议配置为false。removeabandoned不建议在生产环境中打开 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat"/>
    </bean>
    <!-- 通常来说，只需要修改initialSize、minIdle、maxActive。 -->


    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 载入mybatis的全局配置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描com/zhn/mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置.
            value="classpath:com/zhn/mapping/*.xml"指的是classpath(类路径)下com.zhn.mapping包中的所有xml文件,
            UserMapper.xml位于com.zhn.mapping包下,这样UserMapper.xml就可以被自动扫描 -->
        <property name="mapperLocations" value="classpath:com/zhn/demo/webexample/mapper/*.xml"/>
    </bean>

    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.zhn.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.zhn.demo.webexample.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 扫描业务包 -->
    <context:component-scan base-package="com.zhn.demo.webexample.service"/>
    <!-- ========================================针对spring事务管理============================== -->
    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 注解方式配置事物 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*"/>
            <tx:method name="save*"/>
            <tx:method name="delete*"/>
            <tx:method name="remove*"/>
            <tx:method name="update*"/>
            <tx:method name="modify*"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="all*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    <!-- 使用CGLIB产生代理对象 proxy-target-class:true 使用jdk 默认false  jdk1.8 JDK代理 高过cglib -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.zhn.demo.webexample.service.*..*Impl.*(..))"/>
        <aop:advisor pointcut-ref="pointcut" advice-ref="advice"/>
    </aop:config>

    <task:annotation-driven/>

</beans>
