<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration >
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="${catalina.base}/webapp_logs"/>
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30"/>

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -%msg%n</pattern>
			<!--<charset>UTF-8</charset>-->
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/error-%i.log</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
				<maxFileSize>200KB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern> <minIndex>1</minIndex>
            <maxIndex>3</maxIndex> </rollingPolicy> -->
		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 <triggeringPolicy
            class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> <maxFileSize>5MB</maxFileSize>
            </triggeringPolicy> -->

		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>


	<!-- WARN级别日志 appender -->
	<appender name="WARN"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/warn-%i.log</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
				<maxFileSize>200KB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>


	<!-- INFO级别日志 appender -->
	<appender name="INFO"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/info-%i.log</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
				<maxFileSize>200KB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>


	<!-- DEBUG级别日志 appender -->
	<appender name="DEBUG"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/debug-%i.log</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
				<maxFileSize>200KB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>


	<!--&lt;!&ndash; TRACE级别日志 appender &ndash;&gt;-->
	<!--<appender name="TRACE"-->
	<!--class="ch.qos.logback.core.rolling.RollingFileAppender">-->
	<!--&lt;!&ndash; 过滤器，只记录ERROR级别的日志 &ndash;&gt;-->
	<!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
	<!--<level>TRACE</level>-->
	<!--<onMatch>ACCEPT</onMatch>-->
	<!--<onMismatch>DENY</onMismatch>-->
	<!--</filter>-->
	<!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
	<!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
	<!--<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/trace-log.log</fileNamePattern>-->
	<!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
	<!--<maxHistory>${maxHistory}</maxHistory>-->
	<!--</rollingPolicy>-->
	<!--<encoder>-->
	<!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>-->
	<!--</encoder>-->
	<!--</appender>-->

	<!-- Spring -->
	<logger name="org.springframework" level="WARN"/>

	<!--log4jdbc -->
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<logger name="com.ibatis" level="DEBUG"/>
	<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG"/>
	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG"/>
	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG"/>
	<logger name="java.sql.Connection" level="DEBUG"/>
	<logger name="java.sql.Statement" level="DEBUG"/>
	<logger name="java.sql.PreparedStatement" level="DEBUG"/>
	<logger name="java.sql.ResultSet" level="DEBUG"/>

	<!-- 扫描执行sql包DAO层-打印sql -->
	<!--该logger配置表示单独控制，不受root标签控制 -->
	<!-- 属性additivity默认为true，设置为false时，将不生效-->
	<logger name="com.pads.pro.wx.dao" level="DEBUG" additivity="true"/>

	<!--logback的配置，需要配置输出源appender，打日志的loger（子节点）和root（根节点），实际上，
    它输出日志是从子节点开始，子节点如果有输出源直接输入，如果无，判断配置的addtivity，是否像上级传递，
    即是否向root传递，传递则采用root的输出源，否则不输出日志。-->

	<!-- ROOT 设置的日志输出级别表示最低输出级别，当配置日志实例超过该级别，才将被输出，此处设置为 WARN -->
	<root level="INFO">
		<!-- 配置不同级别实例 -->
		<!-- 控制台输出 -->
		<appender-ref ref="STDOUT"/>
		<!-- 文件输出 -->
		<appender-ref ref="INFO"/>
		<appender-ref ref="WARN"/>
		<appender-ref ref="ERROR"/>
		<appender-ref ref="DEBUG"/>
		<!--<appender-ref ref="TRACE"/>-->
	</root>
</configuration>