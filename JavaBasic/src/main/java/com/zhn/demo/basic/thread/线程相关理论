※ 系统性学习Java多线程
参考资料：https://www.cnblogs.com/supiaol/p/10482757.html

一. 理解概念
    1. 什么是进程？
        进程是计算机系统进行资源分配和调度的基本单位，是正在运行程序的实体，每个进程都有它自己的内存空间和系统资源,进程是线程的容
    器。例如：一个正在运行的qq,正在运行的有道词典等等，都是独立的进程。
        进程详细参考：https://blog.csdn.net/luoweifu/article/details/46595285
        此处解释一下：并行，并发
        并行：多个CPU实例或者多台机器同时执行一段处理逻辑，是真的同时进行。
        并发：CUP调度算法，让用户看上去同时执行，但在CPU操作层面上不是真的同时执行的。（详细可参考CPU）

    2. 什么是线程？
        线程是进程中单个顺序控制流，计算机最小的执行单元，一条执行路径，一个线程如果只有条执行路径，则为单线程程序，如果多条执行
    路径则为多线程程序。例如：打开qq后，与人聊天是一条线程，浏览QQ空间又是一条线程。
        假如我们CPU是单核单线程，那么在同一时刻CPU只能执行一条指令，线程只有在获取CPU时间段才能被执行，Java是如何对线程的调用的？
    线程调用的两种模型：
        a.分时调用模型：所有的线程轮流获得CPU的使用权，平均分配每个线程占用CPU
        b.抢占市调度模式：优先让优先级高的线程使用CPU，如果优先级相同，那么会从中随机选取一个，优先级高的线程获取的CPU时间片相对
    多一些。
        c.Java对线程调度的使用的是抢占式，JavaAPI中提供了相关的方法设置优先级。

    3.线程的生命周期（可参考本路径下的生命周期图片）
        线程生命周期是延续早期只有进程的操作系统中，包括这几个步骤：创建，就绪，运行，阻塞，结束。
        创建：一个新的线程被创建，等待该线程被调用执行；
        就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；
        运行：此线程正在执行，正在占有时间片；
        阻塞：等待，获取执行权；
        结束：线程完成任务，或者结束，然后退出（释放所有资源）。


    ※多线程的意义
        进程具有独立性，多进程之间是没有共享资源的，但是多线程可以共享内存资源，而且十分简单。系统创建进程是需要为该进程重分配
    系统资源，浪费了大量资源，但创建线程的代价要小很多，因此多线程实现多任务的并发要比多进程的效率高。